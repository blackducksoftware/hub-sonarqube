/**
 * Black Duck Hub Plugin for SonarQube
 *
 * Copyright (C) 2020 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.sonar.compute;

import org.sonar.api.ce.measure.Measure;
import org.sonar.api.ce.measure.MeasureComputer;

import com.blackducksoftware.integration.hub.sonar.metric.HubSonarMetrics;

public class ComputeVulnerabilityRating implements MeasureComputer {
    public static final String METRIC_KEY = HubSonarMetrics.COMPONENT_RATING.getKey();
    protected static final String[] INPUT_METRICS = { HubSonarMetrics.NUM_VULN_LOW.getKey(), HubSonarMetrics.NUM_VULN_MED.getKey(), HubSonarMetrics.NUM_VULN_HIGH.getKey(), HubSonarMetrics.NUM_VULN_CRITICAL.getKey() };

    public static final int RATING_A = 1;
    public static final int RATING_B = 2;
    public static final int RATING_C = 3;
    public static final int RATING_D = 4;
    public static final int RATING_E = 5;
    public static final int RATING_F = 6;

    @Override
    public MeasureComputerDefinition define(MeasureComputerDefinitionContext defContext) {
        return defContext.newDefinitionBuilder().setInputMetrics(INPUT_METRICS).setOutputMetrics(METRIC_KEY).build();
    }

    @Override
    public void compute(MeasureComputerContext context) {
        Measure lowMeasure = context.getMeasure(INPUT_METRICS[0]);
        Measure medMeasure = context.getMeasure(INPUT_METRICS[1]);
        Measure highMeasure = context.getMeasure(INPUT_METRICS[2]);
        Measure criticalMeasure = context.getMeasure(INPUT_METRICS[3]);

        int rating = ComputeVulnerabilityRating.RATING_A;
        boolean shouldRate = false;
        if (lowMeasure != null) {
            shouldRate = true;
            if (lowMeasure.getIntValue() > 0) {
                rating = ComputeVulnerabilityRating.RATING_B;
            }
        }
        if (medMeasure != null) {
            shouldRate = true;
            if (medMeasure.getIntValue() > 0) {
                rating = ComputeVulnerabilityRating.RATING_C;
            }
        }
        if (highMeasure != null) {
            shouldRate = true;
            if (highMeasure.getIntValue() > 0) {
                rating = ComputeVulnerabilityRating.RATING_D;
            }
        }
        if (criticalMeasure != null) {
            shouldRate = true;
            if (criticalMeasure.getIntValue() > 0) {
                rating = ComputeVulnerabilityRating.RATING_E;
            }
        }
        if (shouldRate) {
            context.addMeasure(METRIC_KEY, rating);
        }
    }
}
