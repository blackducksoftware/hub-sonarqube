/**
 * Black Duck Hub Plugin for SonarQube
 *
 * Copyright (C) 2020 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.sonar.compute;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;
import org.sonar.api.ce.measure.test.TestMeasureComputerContext;
import org.sonar.api.ce.measure.test.TestMeasureComputerDefinitionContext;

public class ComputeVulnerabilityRatingTest {
    private ComputeVulnerabilityRating ratingComputer;
    private TestMeasureComputerDefinitionContext defContext;

    @Before
    public void init() {
        defContext = new TestMeasureComputerDefinitionContext();
        ratingComputer = new ComputeVulnerabilityRating();
    }

    @Test
    public void defineTest() {
        assertTrue(null != ratingComputer.define(defContext));
    }

    @Test
    public void computeNullTest() {
        final TestMeasureComputerContext context = new TestMeasureComputerContext(null, null, ratingComputer.define(defContext));
        ratingComputer.compute(context);

        assertEquals(null, context.getMeasure(ComputeVulnerabilityRating.METRIC_KEY));
    }

    @Test
    public void computeNoneTest() {
        final TestMeasureComputerContext context = new TestMeasureComputerContext(null, null, ratingComputer.define(defContext));
        context.addInputMeasure(ComputeVulnerabilityRating.INPUT_METRICS[0], 0);
        ratingComputer.compute(context);

        assertEquals(ComputeVulnerabilityRating.RATING_A, context.getMeasure(ComputeVulnerabilityRating.METRIC_KEY).getIntValue());
    }

    @Test
    public void computeLowTest() {
        final TestMeasureComputerContext context = new TestMeasureComputerContext(null, null, ratingComputer.define(defContext));
        context.addInputMeasure(ComputeVulnerabilityRating.INPUT_METRICS[0], 1);
        ratingComputer.compute(context);

        final int low = context.getMeasure(ComputeVulnerabilityRating.METRIC_KEY).getIntValue();

        assertTrue(low > 0);
        assertEquals(ComputeVulnerabilityRating.RATING_B, low);
    }

    @Test
    public void computeMedTest() {
        final TestMeasureComputerContext context = new TestMeasureComputerContext(null, null, ratingComputer.define(defContext));
        context.addInputMeasure(ComputeVulnerabilityRating.INPUT_METRICS[1], 1);
        ratingComputer.compute(context);

        final int med = context.getMeasure(ComputeVulnerabilityRating.METRIC_KEY).getIntValue();

        assertTrue(med > 0);
        assertEquals(ComputeVulnerabilityRating.RATING_C, med);
    }

    @Test
    public void computeHighTest() {
        final TestMeasureComputerContext context = new TestMeasureComputerContext(null, null, ratingComputer.define(defContext));
        context.addInputMeasure(ComputeVulnerabilityRating.INPUT_METRICS[2], 1);
        ratingComputer.compute(context);

        final int high = context.getMeasure(ComputeVulnerabilityRating.METRIC_KEY).getIntValue();

        assertTrue(high > 0);
        assertEquals(ComputeVulnerabilityRating.RATING_D, high);
    }
}
